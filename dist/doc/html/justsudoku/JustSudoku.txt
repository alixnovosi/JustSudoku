-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | GTK+/Terminal Haskell Sudoku app
--   
--   GTK+/Terminal Haskell Sudoku app
@package JustSudoku
@version 0.8.0.0


-- | This module houses any methods that don't quite fit in anywhere else
--   (or are generic enough to deserve placement in a separate module).
--   Currently, there are two methods for incrementing tuples, two methods
--   for generating lists of IO objects, and a method for converting a
--   string into an integer conditionally.
module Util.Other

-- | Helper function for check functions. Given two lists of lists, returns
--   a list of lists of pairs.
zipLists :: [[a]] -> [[b]] -> [[(a, b)]]

-- | Add int to tuple of int if the first condition is true for the first
--   element of the tuple and the second is true for the second element.
addToTupleIf :: Int -> (Int -> Bool) -> (Int -> Bool) -> (Int, Int) -> (Int, Int)

-- | Special case for adding one to tuple.
incrementTupleIf :: (Int -> Bool) -> (Int -> Bool) -> (Int, Int) -> (Int, Int)

-- | Given an Int n and a monad a, return a monadic list of n lists of n a.
getMonadicGrid :: (Monad m) => Int -> m a -> m [[a]]

-- | Given a string and a range, return either Just the string converted to
--   an Int if it is in range, or Nothing.
sToIntRange :: String -> [Int] -> Maybe Int


-- | This module exports the methods to create a SudokuBoard, the types
--   used to construct one, and all of the methods used to interact with
--   one once it's created.
module Sudoku.Data.Board

-- | Value of a Square, can be 1-9
data SqVal

-- | Type for Sudoku square value. Stores value and whether this square was
--   placed at creation of the board or not.
data Square

-- | Type for Sudoku board. Just a 2D list of squares.
data SudokuBoard

-- | Location on a SudokuGrid - a coordinate pair.
data Location

-- | Return whether Square is Empty or not.
isEmpty :: Square -> Bool

-- | Create location from two strings specifying coordinates.
toLocation :: String -> String -> Maybe Location

-- | Convert tuple of ints to Location.
tupleToLocation :: (Int, Int) -> Location

-- | Convert Int to Square (or fail and return Nothing), with
--   <tt>original</tt> flag as specified.
toSquare :: Bool -> String -> Maybe Square

-- | Create an empty SudokuBoard.
emptyBoard :: SudokuBoard

-- | Parses a string into a Board.
parseStringToBoard :: String -> SudokuBoard

-- | Prints a SudokuBoard nicely.
prettyPrint :: SudokuBoard -> String

-- | Get the value in a particular square of a Sudoku board.
getBoardValue :: SudokuBoard -> Location -> Square

-- | Returns a SudokuBoard with the value at the two indices modified.
--   Original values are not modified.
setBoardValue :: SudokuBoard -> Location -> Square -> SudokuBoard

-- | Erase square of a SudokuBoard if it isn't original.
eraseBoardValue :: SudokuBoard -> Location -> SudokuBoard

-- | Reset board. Values placed when the board was created are not changed.
resetBoard :: SudokuBoard -> SudokuBoard

-- | Checks if a SudokuBoard is currently valid or not. Checks all rows,
--   columns, and subgrids with checkList and returns a list of squares in
--   error.
checkBoard :: SudokuBoard -> Set Location


-- | This module describes the Moves a player is allowed to make on the
--   Sudoku board. It also describes the possible MoveErrors that can
--   result if the player's move is improper. These two types are used by
--   Parse and the controller to interpret player commands and to inform
--   the player of the results of their moves.
module Sudoku.Control.Move

-- | Types of moves the player can make.
data Move

-- | Set square, provides coordinates and new value.
Set :: String -> String -> String -> Move

-- | Check board.
Check :: Move

-- | Erase square, provides coordinates.
Erase :: String -> String -> Move

-- | Reset board.
Reset :: Move

-- | Quit game.
Quit :: Move

-- | Kinds of move errors that can occur.
data MoveError

-- | Provided value is not a number.
NaNError :: String -> MoveError

-- | Provided location is out of bounds.
OutOfBoundsError :: Int -> Int -> MoveError

-- | Provided value is invalid.
InvalidValueError :: Int -> MoveError

-- | Returned locations are invalid.
InvalidBoardError :: (Set Location) -> MoveError

-- | Asked to quit game.
QuitError :: MoveError

-- | Other error not described above.
OtherError :: String -> MoveError

-- | What each error shows when it occurs.
instance GHC.Classes.Eq Sudoku.Control.Move.Move
instance GHC.Show.Show Sudoku.Control.Move.Move
instance GHC.Show.Show Sudoku.Control.Move.MoveError


-- | This module includes a parseMove method, which takes a string and
--   returns a Move (of those defined in the Move module) that matches. If
--   no move matches, Nothing is returned. Functions are also provided to
--   turn two possibly-valid coordinates (as strings) into a Location, and
--   to turn a possibly-valid string into the value of a new Square. These
--   methods need to parse raw user input, so they're rather strict on what
--   they accept as valid input.
module Sudoku.Control.Parse

-- | Parse a move
parseMove :: String -> Maybe Move

-- | Turn an Int into a square (or nothing). 0 is turned into Empty.
parseSquare :: String -> Maybe Square

-- | Turn two ints into a Location
parseLocation :: String -> String -> Maybe Location
